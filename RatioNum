class Rational:
  """принимаем два необязательных аргумента (n)числитель и (m)знаментель
  используем аннотацию типов, указываем, что оба числа могут быть целыми
  или None

  проверяем на целочисленность, а после устанавливаем значения 
  как закрытое поле (атрибут)
  """
  def __init__(self, n: int | None, m: int | None):
    if not isinstance(n, int):
      raise ValueError("numerator must be an int")
    if not isinstance(m, int):
      raise ValueError("denomitor must be an int")

    self.__numerator = n 

    """знаменатель не может быть равен 0"""
    if m==0:
      raise ValueError("Division by zero")

    self.__denominator = m

  """геттер для числителя
  получаем значение числителя через свойство numerator"""
  @property
  def numerator(self):
    return self.__numerator
  
  """сеттер для числителя
  устанавливаем значение числителя
  принимаем значение и проверяем целое оно или нет"""
  @numerator.setter
  def numerator(self, value: int | None):
    if not isinstance(value, int):
      raise ValueError("numerator must be an int")
    self.__numerator = value

  """аналогично геттер и сеттер для знаменателя"""
  @property
  def denominator(self):
    return self.__denominator
  
  @denominator.setter
  def denominator(self, value: int | None):
    
    if not isinstance(value, int):
      raise ValueError("denominator must be an int")
    
    if value != 0:
      self.__denominator = value
    
    else:
      raise ValueError("Division by zero")

  """Метод для сложения"""
  def __add__(self, other):
    if isinstance(other, Rational): 
      return Rational(self.numenator * other.denominator + self.denominator * other.numerator, self.denominator * other. denominator)
    elif isinstance(other, int):
      return Rational(self.numerator + other * self.denominator, self.denominator)
    else:
      raise TypeError("other operand must be an integer or Rational")

  def __iadd__(self, other):  
    if isinstance(other, Rational):
      self.numenator = self.numenator * other.denominator + self.denominator * other.numerator
      self.denominator = self.denominator * other.denominator
    elif isinstance(other, int):
      self.numenator = self.numerator + other * self.denominator
    else:
      raise TypeError("other operand must be an integer or Rational")
    return self
  
  """Метод для вычитания"""
  def __sub__(self, other):
    if isinstance(other, Rational): 
      return Rational(self.numenator * other.denominator + self.denominator * other.numerator * -1, self.denominator * other. denominator)
    elif isinstance(other, int):
      return Rational(self.numerator - other * self.denominator, self.denominator)
    else:
      raise TypeError("other operand must be an integer or Rational")

  def __isub__(self, other):
    if isinstance(other, Rational):
      self.numenator = self.numenator * other.denominator - self.denominator * other.numerator
      self.denominator = self.denominator * other.denominator
    elif isinstance(other, int):
      self.numenator = self.numerator - other * self.denominator
    else:
      raise TypeError("other operand must be an integer or Rational")
    return self

  """Метод для умножения"""
  def __mul__(self, other):
    if isinstance(other, Rational):
      return Rational(self.numenator * other.numenator, self.denominator*other.denominator)
    elif isinstance(other, int):
      return Rational(self.numenator * other, self.denominator)
    else:
      raise TypeError("other operand must be an integer or Rational")
    
  def __imul__(self, other):
    if isinstance(other, Rational):
      self.numenator = self.numenator * other.numenator
      self.denominator = self.denominator * other.denominator
    elif isinstance(other, int):
      self.numenator = self.numerator * other
    else:
      raise TypeError("other operand must be an integer or Rational")
    return self
    
  """Метод для деления"""
  def __div__(self, other):
    if isinstance(other, Rational):
      return Rational(self.numenator * other.denominator, self.denominator * other.numenator)
    elif isinstance(other, int):
      return Rational(self.numenator, self.denominator * other)
    else:
      raise TypeError("other operand must be an integer or Rational")
  
  def __idiv__(self, other):
    if isinstance(other, Rational):
      self.numenator = self.numenator * other.denominator
      self.denominator = self.denominator * other.numenator
    elif isinstance(other, int):
      self.denominator = self.denominator * other
    else:
      raise TypeError("other operand must be an integer or Rational")
    return self

  """метод определения равенства (==)"""
  def __eq__(self, value):
    if isinstance(other, Rational):
      return (self.numerator * other.denominator) == (self.denominator * other.numenator)
    elif isinstance(other, int):
      return self.numerator == (other * self.denominator)
    else:
      raise ValueError("other operand must be an int or Rational")

  """возведение в степень"""
  def __pow__(self, other: int | None):
    if not isinstance(other, int):
      raise ValueError("other operand must be an int")
    if other < 0:
      return Rational(self.denominator ** (abs(other)), self.numerator ** (abs(other)))
    elif other > 0:
      return Rational(self.numerator ** (other), self.denominator ** (other))
    else: 
      return Rational(1, 1)

  def __abs__(self):
    return Rational(abs(self.numerator), abs(self. denominator))

  """метод определения неравенства (!=)"""
  def __ne__(self, value):
    return not self == other

  """представляет рациональное число в формате "числитель/знаменатель"
  в формате строки"""
  def __str__(self):
    return str(round(self.__numerator / self.__denominator, 10))

  def __repr__(self):
    return f"Rational({self.__numerator}, {self.__denominator})"

  def print_fraction(self):
    return f"Rational number: ({self.__numerator} / {self.__denominator})"

  


a = Rational(1,0)
